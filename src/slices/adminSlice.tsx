import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the structure of AdminInfo
interface AdminInfo {
    id: string;
    name: string;
    email: string;
}

// Define the structure of the admin authentication state
interface adminAuthState {
    isAuthenticated: boolean;
    adminInfo: AdminInfo | null;
    token: string | null;
}

// Initialize the initial state for admin authentication
const initialState: adminAuthState = {
    isAuthenticated: !!localStorage.getItem('token'),
    adminInfo: localStorage.getItem('adminInfo') ? JSON.parse(localStorage.getItem('adminInfo') || '{}') : null,
    token: localStorage.getItem('token') || null,
};

// Create a slice of the Redux store
const adminAuthSlice = createSlice({
    name: 'adminAuth', // Name of the slice
    initialState, // Initial state defined above
    reducers: {
        loginAdminSuccess: (state, action: PayloadAction<{ adminInfo: AdminInfo; token: string }>) => {
            state.isAuthenticated = true; // Set isAuthenticated to true
            state.adminInfo = action.payload.adminInfo; // Update adminInfo with payload data
            state.token = action.payload.token; // Update token with payload data

            // Save the admin info and token to localStorage
            localStorage.setItem('adminInfo', JSON.stringify(action.payload.adminInfo));
            localStorage.setItem('token', action.payload.token);
        },

        logOutAdmin:(state)=>{
            state.isAuthenticated=false;
            state.adminInfo=null;
            state.token=null;

            //removing admin details from localstorage

            localStorage.removeItem('adminInfo');
            localStorage.removeItem('token');
        }
    },
    
});

// Export the actions generated by createSlice
export const { loginAdminSuccess,logOutAdmin } = adminAuthSlice.actions;

// Export the reducer to be used in the store
export default adminAuthSlice.reducer;
